'''https://www.reddit.com/r/pygame/comments/petby5/inventory_system/
- need list to hold items
- need ui for the on screen inventory/hot bar
- need to be able to load/unload items(materials) into the hot bar.. 
- in the hotbar, the items are all pictured but the automatic equipment in each world (main, over, and mineworld) is highlighted based on where in the world the sprite is. 
- write a "gameplay minute" for how I want it to work and code each bit. 
- helps answer questions such as "how do I assign an item from my inventory to the hotbar 
    - do I drag it over?
    - What happens to items in my hotbar if I drop that item?
'''

'''video 1
from globals import *
from world.sprite import *

class Item:
    def __init__(self, name: str, quantity: int = 1) -> None:
        self.name = name
        self.quantity = quantity
    def use(self, *args, **kwargs):
        pass

class BlockItem(Item): #placeable item (block)
    def __init__(self, name: str, quantity: int = 1) -> None:
        super().__init__(name, quantity)
    def use(self, player, position: tuple): #placing the block
        items[self.name].use_type()

class ItemData:
    def __init__(self, name: str, quantity: int = 1, groups: list[str] = ['sprites', 'block_group'], use_type: Entity = Entity, item_type: Item = Item) -> None:
        self.name = name
        self.quantity = quantity
        self.groups = groups
        self.use_type = use_type
        self.item_type = item_type

items: dict[str, ItemData] = (
    'grass':ItemData('grass'), 
    'dirt':ItemData('dirt'), 
    'stone':ItemData('stone'), 
)
'''

'''video 2
https://www.youtube.com/watch?v=RCPdYjx-1PE
- building an equipment system
not needed
'''

''' code #1 from reddit
https://github.com/TheBigKahuna353/Inventory_system/blob/master/Inventory_system.py
'''

import pygame
import random


pygame.init() #initialize all imported  pygame modules - safely initializes all imported pygame modules regarless if the modules actually need to be initialized (stackoverflow)



screen = pygame.display.set_mode((500,500)) 
#creates a display Surface https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode 
#set_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -> Surface
#size argument: pair of numbers representing width and height
#flags argument: collection of additional options 
#   - controls which type of display wanted
#   - several to choose from, can combine multiple types using the bitwise or operator, (the pipe"I" character)
'''   - pygame.FULLSCREEN    create a fullscreen display
    - pygame.DOUBLEBUF     only applicable with OPENGL
    - pygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN
    - pygame.OPENGL        create an OpenGL-renderable display
    - pygame.RESIZABLE     display window should be sizeable
    - pygame.NOFRAME       display window will have no border or controls
    - pygame.SCALED        resolution depends on desktop size and scale graphics
    - pygame.SHOWN         window is opened in visible mode (default)
    - pygame.HIDDEN        window is opened in hidden mode 
'''
#depth argument: represents the number of bits to use for color
#   - usually best to not pass depth, it defaults to the best and fastest color depth for the system. If game requires a specific color format, it can be controled with depth. 
#   - pygame emulate unavaiable color depth which can be slow 
#vysync argument: setting vysync argument to 1, it is possible to get a display with vertical sync, experimental


#these are the images that get shown as items, different color circle for each item
items = [pygame.Surface((50,50),pygame.SRCALPHA) for x in range(4)]
pygame.draw.circle(items[0],(255,0,0),(25,25),25)
pygame.draw.circle(items[1],(0,255,0),(25,25),25)
pygame.draw.circle(items[2],(255,255,0),(25,25),25)
pygame.draw.circle(items[3],(0,0,255),(25,25),25)
'''
https://www.pygame.org/docs/ref/surface.html#pygame.Surface.blits 
pygame Surface is used to represent any image
surface has a fixed resolution and pixel format
surfaces with 8-bit pixels use a color palette to map to 24-bit color
call pygame.Surface() to create a new image object
Surface will be cleared to all black
- only required arguments are the sizes
- with no additional arguments, the Surface will be created
pixel format can be controlled by passing the bit depth or an existing Surface
flags argument is a bitmask of additional features for the surface
- can pass any combination of these flags
    - HWSURFACE    (obsolete in pygame 2) creates the image in video memory
    - SRCALPHA     the pixel format will include a per-pixel alpha
3 types of transparency supported in pygame: colorkeys, surface alphas, and pixel alphas.
- surface alphas can be mixed with colorkeys, but an image with per pixel alphas cannot use other modes
- colorkey transparency makes a single color value transparent, any pixels matching the colorkey will not be drawn
    - surface alpha of 255 is opaque, and a value of 0 is completely transparent
- per pixel alphas are different because they store a transparency value for every pixel
    - this allows for the most precise transparency effects, but it also the slowest
    - cannot mix with surface alpha and colorkeys 
pixel access on hardware surfaces is slow and not recommended
pixels can be accessed using the get_all() abd set_at() functions
    - fine for simple access, but will be slow
    recommended to use pygame.PixelArray (gives an array like view of the surface)
        - for involved mathematical manipulations try pygame.surfarray module (quite quick, but requires NumPy)




'''



font = pygame.font.Font(pygame.font.match_font("calibri"),26)

#class for a item, just holds the surface and can resize it
class Item:
    def __init__(self,id):
        self.id = id
        self.surface = items[id]
    
    def resize(self,size):
        return pygame.transform.scale(self.surface,(size,size))

#the inventory system
class Inventory:
    def __init__(self):
        self.rows = 3
        self.col = 9
        self.items = [[None for _ in range(self.rows)] for _ in range(self.col)]
        self.box_size = 40
        self.x = 50
        self.y = 50
        self.border = 3
    
    #draw everything
    def draw(self):
        #draw background
        pygame.draw.rect(screen,(100,100,100),
                         (self.x,self.y,(self.box_size + self.border)*self.col + self.border,(self.box_size + self.border)*self.rows + self.border))
        for x in range(self.col):
            for y in range(self.rows):
                rect = (self.x + (self.box_size + self.border)*x + self.border,self.x + (self.box_size + self.border)*y + self.border,self.box_size,self.box_size )
                pygame.draw.rect(screen,(180,180,180),rect)
                if self.items[x][y]:
                    screen.blit(self.items[x][y][0].resize(self.box_size),rect)
                    obj = font.render(str(self.items[x][y][1]),True,(0,0,0))
                    screen.blit(obj,(rect[0] + self.box_size//2, rect[1] + self.box_size//2))
                    
    #get the square that the mouse is over
    def Get_pos(self):
        mouse = pygame.mouse.get_pos()
        
        x = mouse[0] - self.x
        y = mouse[1] - self.y
        x = x//(self.box_size + self.border)
        y = y//(self.box_size + self.border)
        return (x,y)
    
    #add an item/s
    def Add(self,Item,xy):
        x, y = xy
        if self.items[x][y]:
            if self.items[x][y][0].id == Item[0].id:
                self.items[x][y][1] += Item[1]
            else:
                temp = self.items[x][y]
                self.items[x][y] = Item
                return temp
        else:
            self.items[x][y] = Item
    
    #check whether the mouse in in the grid
    def In_grid(self,x,y):
        if 0 > x > self.col-1:
            return False
        if 0 > y > self.rows-1:
            return False
        return True
    
    
player_inventory = Inventory()

#what the player is holding
selected = None

running = True
while running:
    #draw the screen
    screen.fill((255,255,255))
    player_inventory.draw()
    
    mousex, mousey = pygame.mouse.get_pos()
    
    #if holding something, draw it next to mouse
    if selected:
        screen.blit(selected[0].resize(30),(mousex,mousey))
        obj = font.render(str(selected[1]),True,(0,0,0))
        screen.blit(obj,(mousex + 15, mousey + 15))        
    
    
    pygame.display.update()
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            running = False
            pygame.quit()
        if e.type == pygame.MOUSEBUTTONDOWN:
            #if right clicked, get a random item
            if e.button == 3:
                selected = [Item(random.randint(0,3)),1]
            elif e.button == 1:
                pos = player_inventory.Get_pos()
                if player_inventory.In_grid(pos[0],pos[1]):
                    if selected:
                        selected = player_inventory.Add(selected,pos)
                    elif player_inventory.items[pos[0]][pos[1]]:
                        selected = player_inventory.items[pos[0]][pos[1]]
                        player_inventory.items[pos[0]][pos[1]] = None



'''video #3 https://www.youtube.com/watch?v=3pY97haPiQE
-- not pygame

'''

'''video 4 and 5


'''

def add_item(self, item):
    first_available_slot = len(self.slots) #first empty slot
    target_slot = len(self.slot) # first slot of same name
    for index, slot in enumerate(self.slots): #gives index position of what we're looking for
        if slot.name == "default" and index < first_available_slot: #gives first available slot
            first_available_slot = index
        if slot.name == item.name: 
            target_slot = index
    if target_slot < len(self.slots): 
        self.slots[target_slot].quantity += 1 
                                 
